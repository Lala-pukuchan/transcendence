// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id                String    @id @default(uuid())

    // 42 oauth info
    fortyTwoId        String    @unique

    // 2fa info
    twoFactorSecret   String?
    isEnabledTfa      Boolean   @default(false)

    // basic info
    username          String    @unique
    avatar            String?   @default("default.jpg") // Default avatar path

    // relationships
    friends           User[]    @relation("UserFriends")
    blockedUsers      User[]    @relation("BlockedUsers")
    // we need to specify the following fields because we want to have "friends" and "blockedUsers" as a relation
    friendRequests    User[]    @relation("UserFriends")
    blockedBy         User[]    @relation("BlockedUsers")

    // channels
    channels          Channel[]
    createdChannels   Channel[] @relation("ChannelOwner")
    adminChannels     Channel[] @relation("ChannelAdmins")

    // messages
    messages          Message[] @relation("ChannelAuthor")

    // stats
    wins              Int       @default(0)
    losses            Int       @default(0)
    ladderLevel       Int       @default(0)
    achievements      String[]

    // matches
    matches           Match[] @relation("UserMatch")
}

model Channel {
    id          Int       @id @default(autoincrement())

    // basic info
    name        String

    // settings
    isDM        Boolean   @default(false)
    isPublic    Boolean   @default(true)
    password    String?

    // members
    ownerId     String
    owner       User      @relation("ChannelOwner", fields: [ownerId], references: [id])
    admins      User[]    @relation("ChannelAdmins")
    users       User[]

    // messages
    messages    Message[]

    // status
    lastUpdated DateTime @default(now())
}

model Message {
    id        Int      @id @default(autoincrement())

    // basic info
    content   String
    createdAt DateTime @default(now())

    // relations
    username    String
    author    User     @relation("ChannelAuthor", fields: [username], references: [username])
    channelId Int
    channel   Channel  @relation(fields: [channelId], references: [id])
}

model Match {
    id          Int      @id @default(autoincrement())

    // basic info
    result      String   // "win" or "loss"
    createdAt   DateTime @default(now())

    // relations
    users       User[]   @relation("UserMatch")
}
